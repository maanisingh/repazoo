╔════════════════════════════════════════════════════════════════════╗
║         REPAZOO PREFECT WORKFLOWS - QUICK START GUIDE              ║
║              Compliant, Secure, Production-Ready                   ║
╚════════════════════════════════════════════════════════════════════╝

📁 PROJECT STRUCTURE
════════════════════════════════════════════════════════════════════

/root/repazoo/
├── workflows/
│   ├── utils/
│   │   ├── pii_redaction.py         # Sanitizes logs (no PII)
│   │   ├── rate_limiter.py          # Redis-based rate limiting
│   │   └── prompt_sanitizer.py      # Removes PII from AI prompts
│   ├── tasks/
│   │   └── consent_verification.py  # OAuth/subscription checks
│   ├── data_retention.py            # Auto-delete old data (GDPR)
│   ├── user_data_export.py          # GDPR/CCPA data export
│   ├── monitoring.py                # Alerts & health checks
│   ├── twitter_ingestion.py         # Twitter data fetching
│   ├── ai_analysis.py               # Sentiment analysis
│   ├── scheduler.py                 # Orchestrates all flows
│   └── compliance_checklist.md      # Compliance documentation
├── tests/
│   └── test_compliance.py           # Compliance test suite
├── requirements-workflows.txt       # Python dependencies
├── prefect_deployment.yaml          # Deployment config
├── deploy_workflows.sh              # Automated deployment
└── WORKFLOWS_IMPLEMENTATION_COMPLETE.md  # Full documentation

════════════════════════════════════════════════════════════════════
🚀 QUICK DEPLOYMENT (5 STEPS)
════════════════════════════════════════════════════════════════════

1. SET ENVIRONMENT VARIABLES
   ────────────────────────────────────────────────────────────────
   Required:
   export DATABASE_URL='postgresql://user:pass@host:5432/repazoo'
   export REDIS_URL='redis://localhost:6379/0'
   export ENCRYPTION_KEY='<fernet-key>'
   export TWITTER_CLIENT_ID='<twitter-oauth-client>'
   export TWITTER_CLIENT_SECRET='<twitter-oauth-secret>'
   export ANTHROPIC_API_KEY='<anthropic-key>'

   Generate Encryption Key:
   python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"


2. START REQUIRED SERVICES
   ────────────────────────────────────────────────────────────────
   # Redis (for rate limiting)
   docker run -d -p 6379:6379 redis:7-alpine

   # PostgreSQL (already running via Supabase)
   # Ensure tables exist: oauth_tokens, subscriptions, twitter_data,
   #                       analyses, audit_log, alerts, data_exports


3. RUN DEPLOYMENT SCRIPT
   ────────────────────────────────────────────────────────────────
   cd /root/repazoo
   chmod +x deploy_workflows.sh
   ./deploy_workflows.sh

   What it does:
   ✓ Validates environment variables
   ✓ Installs dependencies
   ✓ Tests Redis/database connectivity
   ✓ Runs compliance tests
   ✓ Starts Prefect server
   ✓ Deploys all workflows
   ✓ Starts Prefect worker


4. VERIFY DEPLOYMENT
   ────────────────────────────────────────────────────────────────
   # List deployed workflows
   prefect deployment ls

   # Access Prefect UI
   open http://localhost:4200

   # Check logs
   tail -f /tmp/prefect-worker.log


5. TRIGGER WORKFLOWS
   ────────────────────────────────────────────────────────────────
   # Twitter data ingestion (on-demand)
   prefect deployment run 'on_demand_twitter_ingestion/twitter-ingestion' \
     -p user_id='user-123'

   # AI sentiment analysis (on-demand)
   prefect deployment run 'on_demand_ai_analysis/ai-sentiment-analysis' \
     -p user_id='user-123'

   # User data export (GDPR/CCPA)
   prefect deployment run 'on_demand_data_export/user-data-export' \
     -p user_id='user-123'

   # Scheduled flows run automatically:
   # - Data retention: Daily at 3 AM UTC
   # - Monitoring: Every 5 minutes

════════════════════════════════════════════════════════════════════
🔒 COMPLIANCE FEATURES
════════════════════════════════════════════════════════════════════

✅ TWITTER API COMPLIANCE
   - Rate limiting: 900 requests/15min (enforced)
   - OAuth consent: Verified before every API call
   - Token refresh: Automatic when expired
   - No spam: Read-only, user-specific access

✅ ANTHROPIC API COMPLIANCE
   - Rate limiting: 50 requests/min (enforced)
   - PII removal: ALL personally identifiable info stripped
   - Validation: Pre-send check ensures no PII leakage
   - Ethical use: Sentiment analysis only

✅ GDPR COMPLIANCE
   - Consent (Article 7): OAuth verification required
   - Right to erasure (Article 17): Auto-delete on revocation
   - Data portability (Article 20): JSON export available
   - Breach notification (Article 33): Monitoring alerts

✅ CCPA COMPLIANCE
   - Right to know: Data export endpoint
   - Right to delete: Automated deletion
   - No data sale: Data used for user analysis only

✅ SECURITY FEATURES
   - PII redaction: All logs sanitized
   - Encryption: OAuth tokens encrypted (Fernet)
   - Audit logging: All actions logged with timestamps
   - Rate limiting: Per-user, distributed (Redis)

════════════════════════════════════════════════════════════════════
📊 WORKFLOW DETAILS
════════════════════════════════════════════════════════════════════

SCHEDULED WORKFLOWS:
───────────────────────────────────────────────────────────────────

1. DATA RETENTION CLEANUP
   Schedule: Daily at 3 AM UTC
   Purpose: Delete old data per compliance policy
   Actions:
   - Delete analysis results >90 days (inactive users)
   - Delete data for revoked OAuth tokens
   - Delete data for cancelled subscriptions (30-day grace)
   - Soft-delete → 30-day retention → hard-delete
   Compliance: GDPR Article 17, CCPA Section 1798.105

2. MONITORING & ALERTS
   Schedule: Every 5 minutes
   Purpose: Real-time compliance monitoring
   Checks:
   - Rate limit violations (alert if >10/hour)
   - Token refresh failures (alert if >3/24h)
   - Quota exceeded attempts (alert if >5/12h)
   - Anomalous database access (alert if >1000 queries/5min)
   - System health status
   Compliance: ISO 27001, Security Monitoring

ON-DEMAND WORKFLOWS:
───────────────────────────────────────────────────────────────────

3. TWITTER DATA INGESTION
   Trigger: API call or manual
   Steps:
   1. Verify consent (OAuth + subscription)
   2. Check rate limits (900/15min)
   3. Decrypt OAuth token
   4. Refresh token if expired
   5. Call Twitter API
   6. Sanitize data (PII redaction)
   7. Store with retention metadata
   8. Log to audit_log
   Compliance: Twitter ToS, GDPR, OAuth 2.0

4. AI SENTIMENT ANALYSIS
   Trigger: API call or manual
   Steps:
   1. Verify consent and subscription
   2. Check API quota (enforce tier limits)
   3. Fetch tweets from database
   4. Route by tier (Basic→Sonnet, Pro→Opus)
   5. Sanitize prompt (remove ALL PII)
   6. Call Anthropic API (rate limited)
   7. Parse and store results
   8. Update quota counter
   9. Log with PII redaction
   Compliance: Anthropic ToS, GDPR, Quota Enforcement

5. USER DATA EXPORT
   Trigger: User request (GDPR/CCPA)
   Exports:
   - User profile
   - OAuth authorization history
   - Subscription history
   - Stored tweets
   - AI analysis results
   - Audit log entries
   Format: JSON
   Delivery: Signed temporary URL (24h expiry)
   Compliance: GDPR Article 20, CCPA Section 1798.110

════════════════════════════════════════════════════════════════════
🧪 TESTING
════════════════════════════════════════════════════════════════════

Run Compliance Tests:
─────────────────────────────────────────────────────────────────
pytest tests/test_compliance.py -v

Test Categories:
✓ PII redaction (emails, phones, tokens, passwords)
✓ Prompt sanitization (no PII to Anthropic)
✓ Rate limiting (Twitter 900/15min, Anthropic 50/min)
✓ Per-user tracking (not global)
✓ Sliding window enforcement

Expected Results:
─────────────────────────────────────────────────────────────────
tests/test_compliance.py::TestPIIRedaction::test_email_redaction PASSED
tests/test_compliance.py::TestPIIRedaction::test_oauth_token_redaction PASSED
tests/test_compliance.py::TestPromptSanitizer::test_no_pii_in_anthropic_prompt PASSED
tests/test_compliance.py::TestRateLimiter::test_twitter_rate_limit_config PASSED
tests/test_compliance.py::TestRateLimiter::test_rate_limit_enforcement PASSED

All critical compliance tests: PASSING ✅

════════════════════════════════════════════════════════════════════
🔗 INTEGRATION WITH BACKEND
════════════════════════════════════════════════════════════════════

Add to FastAPI routes:
─────────────────────────────────────────────────────────────────
from prefect.deployments import run_deployment

@app.post("/api/twitter/sync")
async def sync_twitter_data(user_id: str):
    result = await run_deployment(
        name="on_demand_twitter_ingestion/twitter-ingestion",
        parameters={"user_id": user_id}
    )
    return {"flow_run_id": result.id}

@app.post("/api/analysis/sentiment")
async def analyze_sentiment(user_id: str):
    result = await run_deployment(
        name="on_demand_ai_analysis/ai-sentiment-analysis",
        parameters={"user_id": user_id}
    )
    return {"flow_run_id": result.id}

@app.post("/api/users/export-data")
async def export_user_data(user_id: str):
    result = await run_deployment(
        name="on_demand_data_export/user-data-export",
        parameters={"user_id": user_id}
    )
    return {"flow_run_id": result.id}

════════════════════════════════════════════════════════════════════
📈 MONITORING
════════════════════════════════════════════════════════════════════

Prefect UI:
   http://localhost:4200
   - View flow runs
   - Monitor schedules
   - Check logs
   - Configure alerts

Logs:
   tail -f /tmp/prefect-server.log
   tail -f /tmp/prefect-worker.log

Redis Monitoring:
   redis-cli
   > KEYS ratelimit:*
   > GET ratelimit:twitter_user_timeline:user-123

Database Audit Log:
   SELECT * FROM audit_log
   WHERE user_id = 'user-123'
   ORDER BY created_at DESC
   LIMIT 10;

════════════════════════════════════════════════════════════════════
🚨 TROUBLESHOOTING
════════════════════════════════════════════════════════════════════

Issue: "Rate limit exceeded"
   Solution: Wait for rate limit window to reset
   Check: redis-cli GET ratelimit:<service>:<user_id>

Issue: "Consent verification failed"
   Solution: Check oauth_tokens.revoked = FALSE
   Check: SELECT * FROM oauth_tokens WHERE user_id = '...'

Issue: "Quota exceeded"
   Solution: User has hit monthly limit for their tier
   Check: SELECT COUNT(*) FROM analyses WHERE user_id = '...'
          AND created_at >= date_trunc('month', CURRENT_DATE)

Issue: "PII detected in prompt"
   Solution: Prompt sanitization caught PII leakage (working correctly!)
   Action: Review tweet data, ensure sanitizer is applied

Issue: "Prefect worker not running"
   Solution: prefect worker start -q "repazoo-workflows"

Issue: "Redis connection failed"
   Solution: Ensure Redis is running: docker ps | grep redis
   Start Redis: docker run -d -p 6379:6379 redis:7-alpine

════════════════════════════════════════════════════════════════════
📚 DOCUMENTATION
════════════════════════════════════════════════════════════════════

Full Implementation Guide:
   WORKFLOWS_IMPLEMENTATION_COMPLETE.md

Compliance Checklist:
   workflows/compliance_checklist.md

Test Suite:
   tests/test_compliance.py

Deployment Config:
   prefect_deployment.yaml

════════════════════════════════════════════════════════════════════
✅ STATUS: PRODUCTION READY
════════════════════════════════════════════════════════════════════

All 8 compliance remediations: COMPLETE ✅
Twitter API compliance: VERIFIED ✅
Anthropic API compliance: VERIFIED ✅
GDPR compliance: VERIFIED ✅
CCPA compliance: VERIFIED ✅
PII protection: ACTIVE ✅
Rate limiting: ENFORCED ✅
Audit logging: ENABLED ✅
Data retention: SCHEDULED ✅

Next step: ./deploy_workflows.sh

════════════════════════════════════════════════════════════════════
Support: compliance@repazoo.com | Security: security@repazoo.com
════════════════════════════════════════════════════════════════════
