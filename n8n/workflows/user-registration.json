{
  "name": "User Registration",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "register",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-register",
      "name": "Webhook: Register User",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ],
      "webhookId": "user-register"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.email }}",
              "operation": "isNotEmpty"
            },
            {
              "value1": "={{ $json.password }}",
              "operation": "isNotEmpty"
            },
            {
              "value1": "={{ $json.full_name }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "validate-input",
      "name": "Validate Input",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT * FROM users WHERE email = '{{ $json.email }}'",
        "options": {}
      },
      "id": "check-existing",
      "name": "Check Existing User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        680,
        200
      ],
      "credentials": {
        "postgres": {
          "id": "l4mcv4XhAixvuZBL",
          "name": "Repazoo PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.length }}",
              "value2": 0,
              "operation": "equal"
            }
          ]
        }
      },
      "id": "user-exists-check",
      "name": "User Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO auth.users (email, password_hash, created_at) VALUES ('{{ $('Webhook: Register User').item.json.email }}', crypt('{{ $('Webhook: Register User').item.json.password }}', gen_salt('bf')), NOW()) RETURNING id, email",
        "options": {}
      },
      "id": "create-auth-user",
      "name": "Create Auth User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1120,
        150
      ],
      "credentials": {
        "postgres": {
          "id": "l4mcv4XhAixvuZBL",
          "name": "Repazoo PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO public.users (id, email, full_name, display_name, subscription_tier, created_at, updated_at) VALUES ('{{ $json.id }}', '{{ $json.email }}', '{{ $('Webhook: Register User').item.json.full_name }}', '{{ $('Webhook: Register User').item.json.full_name }}', 'free', NOW(), NOW()) RETURNING id, email, full_name, subscription_tier",
        "options": {}
      },
      "id": "create-user-profile",
      "name": "Create User Profile",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1280,
        150
      ],
      "credentials": {
        "postgres": {
          "id": "l4mcv4XhAixvuZBL",
          "name": "Repazoo PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'User registered successfully', user: { id: $json.id, email: $json.email, full_name: $json.full_name, subscription_tier: $json.subscription_tier } } }}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1440,
        150
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseCode": 400,
        "responseBody": "={{ { success: false, error: 'User already exists' } }}"
      },
      "id": "error-exists",
      "name": "Error: User Exists",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1120,
        250
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseCode": 400,
        "responseBody": "={{ { success: false, error: 'Invalid input: email, password, and full_name are required' } }}"
      },
      "id": "error-validation",
      "name": "Error: Validation",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        680,
        400
      ]
    }
  ],
  "connections": {
    "Webhook: Register User": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "Check Existing User",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error: Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Existing User": {
      "main": [
        [
          {
            "node": "User Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Exists?": {
      "main": [
        [
          {
            "node": "Create Auth User",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error: User Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Auth User": {
      "main": [
        [
          {
            "node": "Create User Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create User Profile": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null
}
