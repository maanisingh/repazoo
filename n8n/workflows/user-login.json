{
  "name": "User Login",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "login",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-login",
      "name": "Webhook: Login",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ],
      "webhookId": "user-login"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT u.id, u.email, u.full_name, u.subscription_tier FROM auth.users a INNER JOIN public.users u ON a.id = u.id WHERE a.email = '{{ $json.email }}' AND a.password_hash = crypt('{{ $json.password }}', a.password_hash)",
        "options": {}
      },
      "id": "check-credentials",
      "name": "Check Credentials",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        460,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "l4mcv4XhAixvuZBL",
          "name": "Repazoo PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $input.all().length }}",
              "value2": 1,
              "operation": "equal"
            }
          ]
        }
      },
      "id": "auth-check",
      "name": "Auth Valid?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const user = $input.all()[0].json;\nconst token = Buffer.from(`${user.email}:${Date.now()}`).toString('base64');\n\nreturn [{\n  json: {\n    ...user,\n    token: token,\n    expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()\n  }\n}];"
      },
      "id": "generate-token",
      "name": "Generate Token",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, user_id: $json.id, user: { id: $json.id, email: $json.email, full_name: $json.full_name, subscription_tier: $json.subscription_tier }, token: $json.token, expires_at: $json.expires_at } }}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1120,
        200
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseCode": 401,
        "responseBody": "={{ { success: false, error: 'Invalid email or password' } }}"
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        900,
        400
      ]
    }
  ],
  "connections": {
    "Webhook: Login": {
      "main": [
        [
          {
            "node": "Check Credentials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Credentials": {
      "main": [
        [
          {
            "node": "Auth Valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auth Valid?": {
      "main": [
        [
          {
            "node": "Generate Token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Token": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null
}
