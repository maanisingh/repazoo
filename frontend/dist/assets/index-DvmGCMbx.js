import{r as s,R as v}from"./index-Ddobsr3m.js";import{u as h}from"./index-CUzxaUSy.js";var b=v[" useInsertionEffect ".trim().toString()]||h;function E({prop:e,defaultProp:i,onChange:o=()=>{},caller:c}){const[r,n,f]=S({defaultProp:i,onChange:o}),t=e!==void 0,l=t?e:r;{const u=s.useRef(e!==void 0);s.useEffect(()=>{const a=u.current;a!==t&&console.warn(`${c} is changing from ${a?"controlled":"uncontrolled"} to ${t?"controlled":"uncontrolled"}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`),u.current=t},[t,c])}const d=s.useCallback(u=>{if(t){const a=z(u)?u(e):u;a!==e&&f.current?.(a)}else n(u)},[t,e,n,f]);return[l,d]}function S({defaultProp:e,onChange:i}){const[o,c]=s.useState(e),r=s.useRef(o),n=s.useRef(i);return b(()=>{n.current=i},[i]),s.useEffect(()=>{r.current!==o&&(n.current?.(o),r.current=o)},[o,r]),[o,c,n]}function z(e){return typeof e=="function"}function C(e){const[i,o]=s.useState(void 0);return h(()=>{if(e){o({width:e.offsetWidth,height:e.offsetHeight});const c=new ResizeObserver(r=>{if(!Array.isArray(r)||!r.length)return;const n=r[0];let f,t;if("borderBoxSize"in n){const l=n.borderBoxSize,d=Array.isArray(l)?l[0]:l;f=d.inlineSize,t=d.blockSize}else f=e.offsetWidth,t=e.offsetHeight;o({width:f,height:t})});return c.observe(e,{box:"border-box"}),()=>c.unobserve(e)}else o(void 0)},[e]),i}export{C as a,E as u};
