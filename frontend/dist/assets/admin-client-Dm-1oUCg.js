const i="https://cfy.repazoo.com/api";class u{baseURL;constructor(e){this.baseURL=e||i}getToken(){return localStorage.getItem("repazoo_token")}async request(e,s){const t=this.getToken(),r={"Content-Type":"application/json",...s?.headers};t&&(r.Authorization=`Bearer ${t}`);const n=`${this.baseURL}${e}`;try{const a=await fetch(n,{...s,headers:r});if(!a.ok){const o=await a.json().catch(()=>({error:a.statusText}));throw new Error(o.error||o.message||"API request failed")}return a.json()}catch(a){throw new Error(a instanceof Error?a.message:"Network error or server unavailable")}}async getQueueStats(){return(await this.request("/admin/queues")).queues}async getQueueJobs(e,s="waiting",t=50){return(await this.request(`/admin/queues/${e}/jobs?status=${s}&limit=${t}`)).jobs}async retryFailedJob(e,s){await this.request(`/admin/queues/${e}/jobs/${s}/retry`,{method:"POST"})}async getUsers(e=50,s=0,t){const r=new URLSearchParams({limit:e.toString(),offset:s.toString()});t&&r.append("search",t);const n=await this.request(`/admin/users?${r.toString()}`);return{users:n.users,total:n.total}}async updateUser(e,s){return(await this.request(`/admin/users/${e}`,{method:"PUT",body:JSON.stringify(s)})).user}async getSystemHealth(){return(await this.request("/admin/health")).health}async getDatabaseTables(){return(await this.request("/admin/tables")).tables}async getTableData(e,s=50,t=0){const r=await this.request(`/admin/tables/${e}?limit=${s}&offset=${t}`);return{columns:r.columns,rows:r.rows,total:r.total}}async executeQuery(e){const s=await this.request("/admin/query",{method:"POST",body:JSON.stringify({query:e})});return{columns:s.columns,rows:s.rows,rowCount:s.rowCount}}}const h=new u;export{h as a};
