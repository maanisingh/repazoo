const s="https://cfy.repazoo.com/api";class o{baseURL;constructor(e=s){this.baseURL=e}getToken(){return localStorage.getItem("repazoo_auth_token")}getAuthHeaders(){const e=this.getToken(),t={"Content-Type":"application/json"};return e&&(t.Authorization=`Bearer ${e}`),t}async register(e){const t=await fetch(`${this.baseURL}/auth/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Registration failed: ${t.statusText}`);return t.json()}async login(e){const t=await fetch(`${this.baseURL}/auth/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Login failed: ${t.statusText}`);return t.json()}async passwordReset(e){const t=await fetch(`${this.baseURL}/auth/password-reset`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e})});if(!t.ok)throw new Error(`Password reset failed: ${t.statusText}`);return t.json()}async getAllScans(){const e=await fetch(`${this.baseURL}/scans`,{headers:this.getAuthHeaders()});if(!e.ok)throw new Error(`Failed to fetch scans: ${e.statusText}`);return e.json()}async getScanById(e){const t=await fetch(`${this.baseURL}/scans/${e}`,{headers:this.getAuthHeaders()});if(!t.ok)throw new Error(`Failed to fetch scan: ${t.statusText}`);return t.json()}async getDashboardStats(){const e=await fetch(`${this.baseURL}/scans/stats/dashboard`,{headers:this.getAuthHeaders()});if(!e.ok)throw new Error(`Failed to fetch stats: ${e.statusText}`);return e.json()}async createScan(e){const t=await fetch(`${this.baseURL}/scans/create`,{method:"POST",headers:this.getAuthHeaders(),body:JSON.stringify({scan_id:e.scan_id,purpose:e.purpose||"general",custom_context:e.custom_context||""})});if(!t.ok)throw new Error(`Failed to create scan: ${t.statusText}`);return t.json()}async connectTwitter(e){const t=await fetch(`${this.baseURL}/twitter/oauth/connect`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Twitter OAuth failed: ${t.statusText}`);return t.json()}async disconnectTwitter(e){const t=await fetch(`${this.baseURL}/twitter/disconnect/${e}`,{method:"POST",headers:{"Content-Type":"application/json"}});if(!t.ok)throw new Error(`Failed to disconnect Twitter: ${t.statusText}`);return t.json()}async getMyPosts(e){const t=await fetch(`${this.baseURL}/twitter/my-posts/${e}`);if(!t.ok)throw new Error(`Failed to fetch tweets: ${t.statusText}`);return t.json()}async postTweet(e){const t=await fetch(`${this.baseURL}/twitter/post-tweet`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Failed to post tweet: ${t.statusText}`);return t.json()}async deleteTweet(e){const t=await fetch(`${this.baseURL}/twitter/delete-tweet`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Failed to delete tweet: ${t.statusText}`);return t.json()}async getUserTwitterStatus(e){const t=await fetch(`${this.baseURL}/twitter/status/${e}`);if(!t.ok)throw new Error(`Failed to get user status: ${t.statusText}`);return t.json()}async savePurpose(e){const t=await fetch(`${this.baseURL}/user/purpose`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Failed to save purpose: ${t.statusText}`);return t.json()}generateScanId(){return`scan_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}}const r=new o;export{r as n8nClient};
